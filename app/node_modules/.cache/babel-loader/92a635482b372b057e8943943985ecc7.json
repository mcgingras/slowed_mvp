{"ast":null,"code":"var _jsxFileName = \"/Users/mcgingras/Projects/slowed/app/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nfunction App() {\n  const [token, setToken] = useState('');\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [query, setQuery] = useState('drake');\n  const [tracks, setTracks] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedQuery = useDebounce(query, 500); // fetch the Spotify API token from the URL params.\n\n  useEffect(() => {\n    let urlstring = window.location.href;\n    let url = new URL(urlstring);\n    let c = url.searchParams.get('access_token');\n\n    if (c) {\n      setLoggedIn(true);\n      setToken(c);\n    }\n  }, []);\n\n  const searchSpotify = () => {\n    fetch(`https://api.spotify.com/v1/search/?q=${query}&type=track`, {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`\n      })\n    }).then(res => res.json()).then(data => setTracks(data.tracks));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"SPOTIFY SLOWED\")), !isLoggedIn ? /*#__PURE__*/React.createElement(\"a\", {\n    href: \"http://localhost:8888/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }\n  }, \"login\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search Spotify\",\n    onChange: e => setQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      searchSpotify();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Search Spotify\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mcgingras/Projects/slowed/app/src/App.js"],"names":["React","useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","App","token","setToken","isLoggedIn","setLoggedIn","query","setQuery","tracks","setTracks","isSearching","setIsSearching","debouncedQuery","urlstring","window","location","href","url","URL","c","searchParams","get","searchSpotify","fetch","method","headers","Headers","then","res","json","data","e","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\n\nfunction App() {\n\n  const [token, setToken] = useState('');\n  const [isLoggedIn, setLoggedIn] = useState(false);\n\n  const [query, setQuery] = useState('drake');\n  const [tracks, setTracks] = useState([])\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedQuery = useDebounce(query, 500);\n\n  // fetch the Spotify API token from the URL params.\n  useEffect(() => {\n    let urlstring = window.location.href;\n    let url = new URL(urlstring);\n    let c = url.searchParams.get('access_token');\n\n\n    if (c) {\n      setLoggedIn(true);\n      setToken(c);\n    }\n  }, [])\n\n  const searchSpotify = () => {\n    fetch(`https://api.spotify.com/v1/search/?q=${query}&type=track`, {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`,\n      }),\n    })\n      .then(res => res.json())\n      .then(data => setTracks(data.tracks));\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"title\">SPOTIFY SLOWED</h1>\n      </div>\n      {!isLoggedIn ? <a href=\"http://localhost:8888/login\">login</a> :\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Search Spotify\"\n            onChange={e => setQuery(e.target.value)}\n          />\n          <button onClick={() => { searchSpotify() }}>Search Spotify</button>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}